// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using MoviesDataCore;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace MoviesDataCore.Migrations
{
    [DbContext(typeof(MoviesPlaceContext))]
    partial class MoviesPlaceContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn)
                .HasAnnotation("ProductVersion", "2.1.4-rtm-31024")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            modelBuilder.Entity("MoviesDomain.Models.Comment", b =>
                {
                    b.Property<int>("CommentID")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("PostID");

                    b.Property<int>("UserID");

                    b.HasKey("CommentID");

                    b.HasIndex("PostID");

                    b.HasIndex("UserID");

                    b.ToTable("Comment");
                });

            modelBuilder.Entity("MoviesDomain.Models.Favorites", b =>
                {
                    b.Property<int>("FavoritesID")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("UserID");

                    b.HasKey("FavoritesID");

                    b.HasIndex("UserID");

                    b.ToTable("Favorites");
                });

            modelBuilder.Entity("MoviesDomain.Models.Movie", b =>
                {
                    b.Property<int>("MovieID")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("MoviePostID");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("MovieID");

                    b.ToTable("Movie");
                });

            modelBuilder.Entity("MoviesDomain.Models.MoviePost", b =>
                {
                    b.Property<int>("MoviePostID")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("MovieID");

                    b.Property<int>("PostID");

                    b.Property<int>("Rating");

                    b.HasKey("MoviePostID");

                    b.ToTable("MoviePost");
                });

            modelBuilder.Entity("MoviesDomain.Models.Post", b =>
                {
                    b.Property<int>("PostID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Description")
                        .HasMaxLength(300);

                    b.Property<int?>("MovieID");

                    b.Property<int>("MoviePostID");

                    b.Property<DateTime>("PostDate");

                    b.Property<int>("UserID");

                    b.HasKey("PostID");

                    b.HasIndex("MovieID");

                    b.HasIndex("UserID");

                    b.ToTable("Post");
                });

            modelBuilder.Entity("MoviesDomain.Models.User", b =>
                {
                    b.Property<int>("UserID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Email")
                        .IsRequired();

                    b.Property<int>("Password");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(25);

                    b.HasKey("UserID");

                    b.ToTable("User");
                });

            modelBuilder.Entity("MoviesDomain.Models.UserComment", b =>
                {
                    b.Property<int>("UserCommentID")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("CommentID");

                    b.Property<string>("Content")
                        .IsRequired();

                    b.Property<int>("UserID");

                    b.HasKey("UserCommentID");

                    b.HasIndex("CommentID");

                    b.ToTable("UserComments");
                });

            modelBuilder.Entity("MoviesDomain.Models.UserFavorites", b =>
                {
                    b.Property<int>("UserFavoritesID")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("FavoritesID");

                    b.Property<int>("MovieID");

                    b.Property<string>("Note");

                    b.Property<int>("UserID");

                    b.HasKey("UserFavoritesID");

                    b.HasIndex("FavoritesID");

                    b.ToTable("UserFavorites");
                });

            modelBuilder.Entity("MoviesDomain.Models.Comment", b =>
                {
                    b.HasOne("MoviesDomain.Models.Post", "Post")
                        .WithMany("Comments")
                        .HasForeignKey("PostID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("MoviesDomain.Models.User", "User")
                        .WithMany("Comments")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("MoviesDomain.Models.Favorites", b =>
                {
                    b.HasOne("MoviesDomain.Models.User")
                        .WithMany("Favorites")
                        .HasForeignKey("UserID");
                });

            modelBuilder.Entity("MoviesDomain.Models.Post", b =>
                {
                    b.HasOne("MoviesDomain.Models.Movie", "Movie")
                        .WithMany()
                        .HasForeignKey("MovieID");

                    b.HasOne("MoviesDomain.Models.User", "User")
                        .WithMany("Posts")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("MoviesDomain.Models.UserComment", b =>
                {
                    b.HasOne("MoviesDomain.Models.Comment", "Comment")
                        .WithMany("UserComments")
                        .HasForeignKey("CommentID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("MoviesDomain.Models.UserFavorites", b =>
                {
                    b.HasOne("MoviesDomain.Models.Favorites")
                        .WithMany("UserFavorites")
                        .HasForeignKey("FavoritesID");
                });
#pragma warning restore 612, 618
        }
    }
}
